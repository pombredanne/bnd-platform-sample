buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.standardout:gradle-include-plugin:0.1'
	}
}

apply plugin: 'eclipse'
apply plugin: 'include' // for including platform modules
apply plugin: org.standardout.gradle.plugin.platform.PlatformPlugin // from buildSrc submodule

defaultTasks 'clean', 'updateSite'

repositories {
	maven {
		// must be first (before maven central) so javax.media:jai-core can be resolved
		url 'http://download.osgeo.org/webdav/geotools/'
	}
	mavenLocal()
	mavenCentral()
	maven {
		url "http://repo.aduna-software.org/maven2/releases"
	}
	maven {
		url "http://fortytwo.net/maven2"
	}
}

// project version is also platform feature version default
version = '1.2.0'

include {
	// include modules with platform configuration
	
	// example with advanced dependency configuration
	// (replacing logging dependencies by slf4j bridges)
	from('modules/logging.groovy') {
		slf4jAndLogback '1.7.2', '1.0.10' // slf4j and logback with customized versions
	}
	
	// example with merged jars (using match)
	from('modules/geotools.groovy') {
		geotools()
	}
	
	// example with merged jars (using bundle)
	from 'modules/orientdb.groovy', {
		orientGraphDB()
	}

	// common bnd configurations (no dependencies added)
	// also adapts the default configuration
	from 'modules/common.groovy'
	
	from 'modules/schemacrawler.groovy'
	
	// example with local jar
	from 'modules/groovy-sandbox'
	
	// ensures that always a fixed version of groovy-all is used as groovy dependency
	from 'modules/groovy.groovy', {
		groovyAll '2.1.5', true, 'groovy'
	}
}

platform {
	// platform extension - plugin specific configuration
	
	// fetch sources for dependencies if possible (result in source bundles; enabled by default)
	fetchSources = true
	
	// by default limit import package versions to next major version
	importVersionStrategy = MAJOR
	
	// Dependencies can be declared in the platform extension
	// (in fact, they need to be, if a custom bnd configuration is needed)
	// In addition to the bnd configuration 'bundle' definitions can understand
	// any configuration that a normal dependency does, e.g. excluding transitive
	// dependencies
	
	// security
	bundle 'org.jasig.cas:cas-client:3.1.10'
	
	// utilities
	bundle 'com.google.guava:guava:16.0.1'
	bundle 'net.sf.trove4j:trove4j:3.0.3'
	bundle 'commons-io:commons-io:2.4'
	bundle 'net.sf.ehcache:ehcache-core:2.6.6', {
		bnd {
			// make hibernate packages optional
			optionalImport 'org.hibernate', 'org.hibernate.*'
		}
	}
	bundle group: 'org.pegdown', name: 'pegdown', version: '1.4.2'
	
	// bnd configurations (just configuration, not adding a dependency)
	bnd group: 'xml-apis', name: 'xml-apis', {
		instruction 'Private-Package', 'license' // we don't want to export 'license' as package
	}
	
	// later bnd configurations augment and possibly override previously defined configuration
	// they do not override, if they are more general (e.g. only name defined instead of group and name)
	bnd name: 'xml-apis', {
		bundleName = 'XML APIs' // set's bundle name
		instruction 'Private-Package', '' // does not override instruction in previous bnd 
	}
}

dependencies {
	// platform dependencies can also be defined here (w/o bnd configuration)
	
	platform 'org.codehaus.groovy.modules.http-builder:http-builder:0.6'
	
	// XML
	platform 'org.apache.ws.xmlschema:xmlschema-core:2.0.2'
//	platform 'org.apache.ws.commons.schema:XmlSchema:1.4.7'
	
	// jackson 1
	platform 'org.codehaus.jackson:jackson-core-asl:1.9.13'
	// jackson 2
	platform 'com.fasterxml.jackson.core:jackson-core:2.3.0'
	platform 'com.fasterxml.jackson.core:jackson-databind:2.3.0'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}