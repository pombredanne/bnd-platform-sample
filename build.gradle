
apply plugin: org.standardout.gradle.plugin.platform.PlatformPlugin
apply plugin: org.standardout.gradle.plugin.include.IncludePlugin

defaultTasks 'clean', 'updateSite'

repositories {
	maven {
		// must be first (before maven central) so javax.media:jai-core can be resolved
		url 'http://download.osgeo.org/webdav/geotools/'
	}
	mavenLocal()
	mavenCentral()
	maven {
		url "http://repo.aduna-software.org/maven2/releases"
	}
	maven {
		url "http://fortytwo.net/maven2"
	}
	// ivy {   url "http://repo.mycompany.com/repo"}
}

// project version is also platform feature version default
version = '1.2.0'

project.ext {
	// project specific variables
	groovyVersion = '2.1.5'
	schemacrawlerVersion = '8.16'
}

configurations {
	platform {
		// exclude log4j (we provide it over slf4j)
		exclude group: 'log4j'
		
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.group == 'org.codehaus.groovy') {
				// always use groovy-all instead of (groovy-*)
				details.useTarget "org.codehaus.groovy:groovy-all:${groovyVersion}"
			}
		}
	}
}

include {
	// include modules with platform configuration
	location('modules/logging.groovy') {
		slf4jAndLogback '1.7.0', '1.0.10' // slf4j and logback with customized versions
	}
	location('modules/geotools.groovy') {
		geotools()
	}
	location('modules/orientdb.groovy') {
		orientDB()
	}
}

platform {
	// platform extension - plugin specific configuration
	
	// fetch sources for dependencies if possible (result in source bundles)
	fetchSources = true
	
	// dependencies can be declared in the extension
	// (in fact, they need to be, if a custom bnd configuration is needed)
	
	// database
	bundle "net.sourceforge.schemacrawler:schemacrawler:$schemacrawlerVersion", {
		bnd {
			// custom bnd configuration
			instruction 'Import-Package', 'freemarker.*;resolution:=optional,*' // freemarker is optional
			// export schemacrawler only
			instruction 'Export-Package', """
					schemacrawler;version=$version,
					schemacrawler.*;version=$version"""
			instruction 'Private-Package', '*' // other packages private
			
			version = schemacrawlerVersion + '.0.customwrap'
		}
	}
	bundle 'com.thoughtworks.xstream:xstream:1.4.5' // dependency of schemacrawler not listed in pom!
	
	// groovy
	bundle "org.codehaus.groovy:groovy-all:${groovyVersion}"
	
	// security
	bundle 'org.jasig.cas:cas-client:3.1.10'
	
	// utilities
	bundle 'com.google.guava:guava:16.0.1'
	bundle 'net.sf.trove4j:trove4j:3.0.3'
	bundle 'commons-io:commons-io:2.4'
	bundle 'net.sf.ehcache:ehcache-core:2.6.6'
	bundle group: 'org.pegdown', name: 'pegdown', version: '1.4.2'
	
	// local dependencies
	
	// single file
	bundle file('libs/groovy-sandbox-1.6-SNAPSHOT.jar'), {
		bnd {
			version = '1.6.0.hale'
			symbolicName = 'org.kohsuke.groovy.sandbox'
			bundleName = 'Groovy Sandbox (adapted)'
			instruction 'Export-Package', "*;version=$version"
		}
	}
	
	// bnd configurations (just configuration, not adding a dependency)
	bnd group: 'xml-apis', name: 'xml-apis', {
		instruction 'Private-Package', 'license' // we don't want to export 'license' as package
	}
	
	// later bnd configurations augment and possibly override previously defined configuration
	// they do not override, if they are more general (e.g. only name defined instead of group and name)
	bnd name: 'xml-apis', {
		bundleName = 'XML APIs' // set's bundle name
		instruction 'Private-Package', '' // does not override instruction in previous bnd 
	}
}

dependencies {
	// platform dependencies can also be defined here (w/o bnd configuration)
	
	platform 'org.codehaus.groovy.modules.http-builder:http-builder:0.6'
	
	// XML
	platform 'org.apache.ws.xmlschema:xmlschema-core:2.0.2'
//	platform 'org.apache.ws.commons.schema:XmlSchema:1.4.7'
	
	// jackson 1
	platform 'org.codehaus.jackson:jackson-core-asl:1.9.13'
	// jackson 2
	platform 'com.fasterxml.jackson.core:jackson-core:2.3.0'
	platform 'com.fasterxml.jackson.core:jackson-databind:2.3.0'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}